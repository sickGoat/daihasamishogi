package board.implementation;

public class BitUtil {

	private static final double log2Value = Math.log(2);

	/**
	 * Maschera di carnevale per le verticali
	 */
	public static final int VERTICAL_MASK[] = { 0x1FC, 0x7F };
	
	/**
	 * Maschere di carnevale per le diagonali
	 */
	public static final int FC_DIAGONAL_MASK[][] = { { 0x7F, 0x7F, 0x3F, 0x7F, 0x1F, 0x3F, 0, 0x1F, 0, 0 },
			{ 0x1FC, 0xFC, 0xFE, 0x7C, 0x7F, 0, 0x3F, 0, 0x1F, 0 } };

	/**
	 * Quali diagonali devo guardare per trovare il max
	 */
	public static final int FC_DIAGONAL_LOOKUP[][] = { { 0, 1, 2, 3, 4, 5, 7 }, { 0, 1, 2, 3, 4, 6, 8 } };

	/**
	 * Per ogni diagonale quanto devo schiftare il long per averla
	 */
	public static final int DIAGONAL_SHIFT[] = { 0, 9, 17, 25, 32, 38, 44, 50, 55, 60 };

	/**
	 * Shift necessario per avere solo una riga
	 */
	public static final int VERTICAL_SHIFT[] = { 0, 9, 18 };

	/**
	 * Per ogni indice di diagonale mi restituisce la sua lunghezza
	 */
	public static final int DIAGONAL_LENGHT[] = { 9, 8, 8, 7, 7, 6, 6, 5, 5, 0 };

	/**
	 * Per ogni cella mi restituisce la diagonale destra di appartenenza
	 */
	public static final int DIAGONAL_RIGHT_OWNERSHIP[] = { 0x0, 0x1, 0x3, 0x5, 0x7, 0x9, 0x9, 0x9, 0x9, 0x2, 0x0, 0x1,
			0x3, 0x5, 0x7, 0x9, 0x9, 0x9, 0x4, 0x2, 0x0, 0x1, 0x3, 0x5, 0x7, 0x9, 0x9, 0x6, 0x4, 0x2, 0x0, 0x1, 0x3,
			0x5, 0x7, 0x9, 0x8, 0x6, 0x4, 0x2, 0x0, 0x1, 0x3, 0x5, 0x7, 0x9, 0x8, 0x6, 0x4, 0x2, 0x0, 0x1, 0x3, 0x5,
			0x9, 0x9, 0x8, 0x6, 0x4, 0x2, 0x0, 0x1, 0x3, 0x9, 0x9, 0x9, 0x8, 0x6, 0x4, 0x2, 0x0, 0x1, 0x9, 0x9, 0x9,
			0x9, 0x8, 0x6, 0x4, 0x2, 0x0 };

	/**
	 * Per ogni cella mi restituisce la diagonale sinistra di appartenenza
	 */
	public static final int DIAGONAL_LEFT_OWNERSHIP[] = { 0x9, 0x9, 0x9, 0x9, 0x7, 0x5, 0x3, 0x1, 0x0, 0x9, 0x9, 0x9,
			0x7, 0x5, 0x3, 0x1, 0x0, 0x2, 0x9, 0x9, 0x7, 0x5, 0x3, 0x1, 0x0, 0x2, 0x4, 0x9, 0x7, 0x5, 0x3, 0x1, 0x0,
			0x2, 0x4, 0x6, 0x7, 0x5, 0x3, 0x1, 0x0, 0x2, 0x4, 0x6, 0x8, 0x5, 0x3, 0x1, 0x0, 0x2, 0x4, 0x6, 0x8, 0x9,
			0x3, 0x1, 0x0, 0x2, 0x4, 0x6, 0x8, 0x9, 0x9, 0x1, 0x0, 0x2, 0x4, 0x6, 0x8, 0x9, 0x9, 0x9, 0x0, 0x2, 0x4,
			0x6, 0x8, 0x9, 0x9, 0x9, 0x9 };

	/**
	 * Restitusce a quale blocco della bit map appartiene la cella
	 */
	public static final int VERTICAL_BLOCK_OWNERSHIP[] = { 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0,
			0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1,
			0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2,
			0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x0, 0x0, 0x0,
			0x1, 0x1, 0x1, 0x2, 0x2, 0x2 };

	/**
	 * Restitusce a quale riga del blocco della bitmap appartiene la cella
	 */
	public static final int VERTICAL_ROW_OWNERSHIP[] = { 0x2, 0x1, 0x0, 0x2,

			0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1,

			0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0,

			0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2,

			0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1,

			0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0,

			0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0, 0x2, 0x1, 0x0 };

	/**
	 * Sono tutti i move set per ogni cella nelle diagonali sinistre
	 */
	public static final long DIAGONAL_LEFT_MOVESET[] = { 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000000L, 0x8000000000L,
			0x2000000L, 0x200L, 0x1L, 0x0L, 0x0L, 0x0L, 0x10000000000000L, 0x10000000000L, 0x4000000L, 0x400L, 0x2L,
			0x20000L, 0x0L, 0x0L, 0x20000000000000L, 0x20000000000L, 0x8000000L, 0x800L, 0x4L, 0x40000L, 0x100000000L,
			0x0L, 0x40000000000000L, 0x40000000000L, 0x10000000L, 0x1000L, 0x8L, 0x80000L, 0x200000000L,
			0x200000000000L, 0x80000000000000L, 0x80000000000L, 0x20000000L, 0x2000L, 0x10L, 0x100000L, 0x400000000L,
			0x400000000000L, 0x100000000000000L, 0x100000000000L, 0x40000000L, 0x4000L, 0x20L, 0x200000L, 0x800000000L,
			0x800000000000L, 0x200000000000000L, 0x0L, 0x80000000L, 0x8000L, 0x40L, 0x400000L, 0x1000000000L,
			0x1000000000000L, 0x400000000000000L, 0x0L, 0x0L, 0x10000L, 0x80L, 0x800000L, 0x2000000000L,
			0x2000000000000L, 0x800000000000000L, 0x0L, 0x0L, 0x0L, 0x100L, 0x1000000L, 0x4000000000L, 0x4000000000000L,
			0x1000000000000000L, 0x0L, 0x0L, 0x0L, 0x0L };

	/**
	 * Sono tutti i move set per ogni cella nelle diagonali destre
	 */
	public static final long DIAGONAL_RIGHT_MOVESET[] = { 0x1L, 0x200L, 0x2000000L, 0x8000000000L, 0x8000000000000L,
			0x0L, 0x0L, 0x0L, 0x0L, 0x20000L, 0x2L, 0x400L, 0x4000000L, 0x10000000000L, 0x10000000000000L, 0x0L, 0x0L,
			0x0L, 0x100000000L, 0x40000L, 0x4L, 0x800L, 0x8000000L, 0x20000000000L, 0x20000000000000L, 0x0L, 0x0L,
			0x200000000000L, 0x200000000L, 0x80000L, 0x8L, 0x1000L, 0x10000000L, 0x40000000000L, 0x40000000000000L,
			0x0L, 0x100000000000000L, 0x400000000000L, 0x400000000L, 0x100000L, 0x10L, 0x2000L, 0x20000000L,
			0x80000000000L, 0x80000000000000L, 0x0L, 0x200000000000000L, 0x800000000000L, 0x800000000L, 0x200000L,
			0x20L, 0x4000L, 0x40000000L, 0x100000000000L, 0x0L, 0x0L, 0x400000000000000L, 0x1000000000000L,
			0x1000000000L, 0x400000L, 0x40L, 0x8000L, 0x80000000L, 0x0L, 0x0L, 0x0L, 0x800000000000000L,
			0x2000000000000L, 0x2000000000L, 0x800000L, 0x80L, 0x10000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1000000000000000L,
			0x4000000000000L, 0x4000000000L, 0x1000000L, 0x100L };

	/**
	 * Movimenti verticali delle celle
	 */
	public static final int VERTICAL_MOVESET[] = { 0x4000000, 0x20000, 0x100, 0x4000000, 0x20000, 0x100, 0x4000000,
			0x20000, 0x100, 0x2000000, 0x10000, 0x80, 0x2000000, 0x10000, 0x80, 0x2000000, 0x10000, 0x80, 0x1000000,
			0x8000, 0x40, 0x1000000, 0x8000, 0x40, 0x1000000, 0x8000, 0x40, 0x800000, 0x4000, 0x20, 0x800000, 0x4000,
			0x20, 0x800000, 0x4000, 0x20, 0x400000, 0x2000, 0x10, 0x400000, 0x2000, 0x10, 0x400000, 0x2000, 0x10,
			0x200000, 0x1000, 0x8, 0x200000, 0x1000, 0x8, 0x200000, 0x1000, 0x8, 0x100000, 0x800, 0x4, 0x100000, 0x800,
			0x4, 0x100000, 0x800, 0x4, 0x80000, 0x400, 0x2, 0x80000, 0x400, 0x2, 0x80000, 0x400, 0x2, 0x40000, 0x200,
			0x1, 0x40000, 0x200, 0x1, 0x40000, 0x200, 0x1 };

	/**
	 * Restituisce la valutazione della configurazione
	 */
	public static final int FC_MAX_EVALUATION[] = { 0x0, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x3, 0x1, 0x2, 0x2, 0x3, 0x2,
			0x3, 0x3, 0x4, 0x1, 0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x4, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x1, 0x1,
			0x2, 0x2, 0x2, 0x2, 0x3, 0x3, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x4,
			0x4, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x2, 0x3, 0x2, 0x2, 0x2, 0x3,
			0x3, 0x3, 0x3, 0x4, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 0x5, 0x2,
			0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4,
			0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x5, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x3, 0x2, 0x2, 0x2,
			0x3, 0x2, 0x3, 0x3, 0x4, 0x2, 0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x4, 0x3, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5,
			0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x3, 0x3, 0x3, 0x3, 0x3,
			0x3, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3,
			0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4,
			0x5, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4,
			0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x1, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x3, 0x1,
			0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x4, 0x2, 0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x4, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4,
			0x4, 0x5, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x3, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x3, 0x3, 0x3,
			0x3, 0x3, 0x3, 0x4, 0x4, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3,
			0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, 0x3, 0x4, 0x4,
			0x4, 0x4, 0x5, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4,
			0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x5, 0x5, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,
			0x3, 0x2, 0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x4, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, 0x3, 0x4,
			0x3, 0x4, 0x4, 0x5, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x4,
			0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x5, 0x5, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3,
			0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4,
			0x4, 0x4, 0x4, 0x4, 0x5, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4,
			0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5 };

	/**
	 * Questo metodo calcola il numero di bit posti ad 1 sono presenti in un
	 * intero
	 * 
	 * @param i
	 * @return
	 */
	public static int swar(int i) {
		i = i - ((i >>> 1) & 0x55555555);
		i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);
		return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;
	}

	/**
	 * Questo metodo restituisce il logaritmo di un numero.
	 * 
	 * @param i
	 * @return
	 */
	public static int log2(int i) {
		// usa metodi nativi java per calcolare il logaritmo
		return (int) (Math.log(i) / log2Value);
	}
}
